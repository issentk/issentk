#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-
"""
adds default headers for the website
to all files where they are not present
"""



import os
import traceback
import tldextract
import ruamel.yaml
from ruamel.yaml.scalarstring import walk_tree



HEADERS_TO_ADD = {
  "layout": "post",
  "author": "issentk",
  "author_url": "https://github.com/issentk"
}



class InvalidFileError(Exception):
  pass



def extract_header(file):
  """
  splits the file into the yaml header and
  the file body.
  throws InvalidFileError if header is not found.
  """
  lines = file.readlines()
  max_lines = len(lines)
  
  # check file validity
  if max_lines == 0:
    raise InvalidFileError("Empty File")

  if lines[0].strip() != "---":
    raise InvalidFileError("No YAML header found at start: %s" % lines[0])

  # skip first yaml header delimiter
  current_line = 1
  
  # split to header and body
  header = []
  body = []

  while current_line < max_lines:
    # check for ending yaml header delimiter
    if lines[current_line].strip() == "---":
      body = lines[current_line+1:]
      break
    header.append(lines[current_line])
    current_line += 1

  return "".join(header), "".join(body)



def extract_tag(header_dict):
  source = header_dict["source"]
  if isinstance(source, list):
    source = source[0]

  tag = '.'.join(tldextract.extract(source)[1:3])
  header_dict.update({"tag": tag})



def process_file(file):
  """ updates the headers and overwrites the old file """
  header, body = extract_header(file)
  
  header_dict = ruamel.yaml.round_trip_load(header)

  if "layout" in header_dict:
    return False

  if "tag" not in header_dict:
    extract_tag(header_dict)

  header_dict.update(HEADERS_TO_ADD)
  header = os.linesep.join([
    "---", ruamel.yaml.round_trip_dump(header_dict).strip(), "---", ""
  ] )

  file.seek(0)
  file.write(header)
  file.write(body)
  file.truncate()
  return True



def add_headers():
  """ main method that iterates over all files in working directory and
      adds the necessary headers if they are missing. """

  # Get all files in working directory and open each with read and write access
  for filename in os.listdir(os.getcwd()):
    if not filename.endswith(".md"): continue
    with open(filename, 'r+') as file:
      try:

        # process files
        processed = process_file(file)
        if processed:
          print "File %s was updated with headers." % filename
        else:
          print "File %s was not touched. It already contains the headers." % filename

      except InvalidFileError as e:
        print "Error with file %s: %s." % (filename, e.message)
      except:
        traceback.print_exc()



if __name__ == "__main__":
  add_headers()
